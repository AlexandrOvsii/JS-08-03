// // 1. Оголошення функції multiply
// function multiply(hello) {
//     // Тіло функції
//     console.log("Це лог на момент виклику функції multiply");
//   }
  
//   // 2. Виклики функції multiply
//   multiply(); // 'Це лог на момент виклику функції multiply'
//   multiply(); // 'Це лог на момент виклику функції multiply'
//   multiply(); // 'Це лог на момент виклику функції multiply'

//========================ПОВЕРНЕННЯ ЗНАЧЕННЯ==============================
// function multiply(x, y, z) {
//     console.log("Код до return виконується звичайним чином");
  
//     // Повертаємо результат виразу множення
//     return x * y * z;
  
//     console.log("Цей лог ніколи не виконається, він стоїть після return");
//   }
  
//   // Результат роботи функції можна зберегти у змінну
//   let result = multiply(2, 3, 5);
//   console.log(result); // 30
  
//   result = multiply(4, 8, 12);
//   console.log(result); // 384
  
//   result = multiply(17, 6, 25);
//   console.log(result); // 2550

//========================ПСЕВДОМАСИВ ARGUMENTS==============================

// function multiply() {
//     let total = 1;
  
//     for (const argument of arguments) {
//       total *= argument;
//     }
  
//     return total;
//   }
  
//   console.log(multiply(1, 2, 3)); //  6
//   console.log(multiply(1, 2, 3, 4)); //  24
//   console.log(multiply(1, 2, 3, 4, 5)); //  120

//========================ПАТТЕРН РАННЕ ПОВЕРНЕННЯ ==============================

// function withdraw(amount, balance) {
//     // Якщо умова виконується, викликається console.log
//     // і вихід із функції. Код після тіла if не виконається.
//     if (amount === 0) {
//       console.log("Для проведення операції введіть суму більшу за нуль");
//       return;
//     }
  
//     // Якщо умова першого if не виконалась, його тіло пропускається
//     // та інтерпретатор доходе до другого if.
//     // Якщо умова виконується, викликається console.log і вихід із функції.
//     // Код, що знаходиться після тіла if, не виконається.
//     if (amount > balance) {
//       console.log("Недостатньо коштів на рахунку");
//       return;
//     }
  
//     // Якщо жоден із попередніх if не виконався,
//     // інтерпретатор доходить до цього коду і виконує його.
//     console.log("Операція зняття коштів проведена");
//   }
  
//   withdraw(0, 300); // "Для проведення операції введіть суму більшу за нуль"
//   withdraw(500, 300); // "Недостатньо коштів на рахунку"
//   withdraw(100, 300); // "Операція зняття коштів проведена"

//========================Глобальна область видимості ==============================
// const globalValue = 10;

// console.log(globalValue); // 10

// function foo() {
//   console.log(globalValue); // 10
// }

// for (let i = 0; i < 5; i++) {
//   console.log(globalValue); // 10

//   if (i === 2) {
//     console.log(globalValue); // 10
//   }
// }

//========================БЛОКОВА область видимості ==============================
// function foo() {
//     const a = 20;
//     console.log(a); // 20
  
//     for (let i = 0; i < 5; i++) {
//       console.log(a); // 20
  
//       if (i === 2) {
//         console.log(a); // 20
//       }
//     }
//   }
  
// //   // ❌ Помилка! Змінна a - недоступна у глобальній області видимості
// //   console.log(a);
  
// //   for (let i = 0; i < 3; i++) {
// //     // ❌ Помилка! Змінна a - недоступна в цій області видимості
// //     console.log(a);
// //   }

//========================Стек викликів ==============================
// function fnA() {
//     console.log("Лог всередині функції fnA до виклику fnB");
//     fnB();
//     console.log("Лог всередині функції fnA після виклику fnB");
//   }
  
//   function fnB() {
//     console.log("Лог всередині функції fnB");
//   }
  
//   console.log("Лог до виклику fnA");
//   fnA();
//   console.log("Лог після виклику fnA");
  
  // "Лог до виклику fnA"
  // "Лог всередині функції fnA до виклику fnB"
  // "Лог всередині функції fnB"
  // "Лог всередині функції fnA після виклику fnB"
  // "Лог після виклику fnA"

  //======================== М А С И В И ==============================

  const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
  console.log(friends);
  const lastIndex = friends.length - 1;
  console.log(lastIndex);

  friends[2] = 'Bananas'; //записуємо в масив банан замість Полі

  console.log(friends);